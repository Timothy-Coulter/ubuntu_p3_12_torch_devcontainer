[project]
name = "torch-starter"
version = "0.1.0"
description = "Deep Learning starter template with uv, CUDA 12.4 PyTorch, and VS Code Dev Containers."
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
authors = [{ name = "Your Name" }]
keywords = ["deep-learning", "pytorch", "transformers", "uv", "devcontainer"]

# Core libs (torch is installed separately with CUDA wheels in devcontainer postCreate)
dependencies = [
  "numpy>=1.26",
  "pandas>=2.0",
  "scipy>=1.11",
  "scikit-learn>=1.3",
  "tqdm>=4.66",
  "transformers>=4.42",
  "datasets>=2.19",
  "accelerate>=0.31",
  "sentencepiece>=0.1.99",
  "safetensors>=0.4",
  "tensorboard>=2.17",
  "matplotlib>=3.8",
  "seaborn>=0.13",
  "jupyter>=1.0",
  "ipykernel>=6.29",
  "pyyaml>=6.0",
  "kaggle>=1.6"
]

[project.optional-dependencies]
# Installed with CUDA wheels using a special index-url in the devcontainer postCreate step
torch-cu124 = [
  "torch",
  "torchvision",
  "torchaudio"
]

dev = [
  "ruff>=0.4.8",
  "mypy>=1.10",
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "pre-commit>=3.7",
  "types-requests",
  "types-PyYAML",
  "ipdb"
]

notebook = [
  "jupyterlab>=4.2"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "A", "C90"]
ignore = []

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
pretty = true
exclude = [
  "build/",
  "dist/",
  "notebooks/",
  ".venv/",
  ".tox/",
  ".mypy_cache/"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q --disable-warnings"
testpaths = ["tests"]

[tool.uv]
# uv configuration for this project
# preview = true
"index-strategy" = "unsafe-best-match"

# Primary index: PyPI (listed first so it wins for general packages like requests)
[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

# Secondary index: PyTorch CUDA 12.4 wheels (used explicitly via sources below)
[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu124"

[tool.uv.sources]
# Route only torch packages to the PyTorch index; everything else resolves from PyPI
torch = { index = "pytorch" }
torchvision = { index = "pytorch" }
torchaudio = { index = "pytorch" }

# Force key ecosystem packages to resolve from PyPI to avoid partial mirrors on the PyTorch index
requests = { index = "pypi" }
jupyterlab = { index = "pypi" }
"jupyterlab-server" = { index = "pypi" }