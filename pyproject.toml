[project]
name = "torch-starter"
version = "0.1.0"
description = "CUDA-enabled PyTorch deep learning development environment with uv and VS Code Dev Containers (uses CUDA 12.6 PyTorch wheels)."
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@domain.com" }]
maintainers = [{ name = "Your Name", email = "your.email@domain.com" }]
keywords = ["deep-learning", "pytorch", "transformers", "cuda", "gpu", "uv", "devcontainer"]

# Core dependencies - PyTorch CUDA wheels installed separately in Dockerfile
dependencies = [

  "torch",
  "torchvision",
  "torchaudio",
  "numpy",
  "pandas",
  "scipy",
  "scikit-learn",
  "tqdm",

  # Hugging Face ecosystem
  "transformers",
  "datasets",
  "accelerate",
  "safetensors",
  "sentencepiece",
  "tokenizers",
  
  # Image processing
  "pillow",
  "albumentations",
  
  # Visualization
  "matplotlib",
  
  # Jupyter and interactive development
  "jupyter",
  "ipykernel",
  "ipywidgets",
  
  # Configuration and utilities
  "pyyaml",
  "requests",
  "python-dotenv",
  "rich",
  "typer",
  
  # GPU monitoring and utilities
  "nvidia-ml-py"
]

[project.optional-dependencies]

# Development tools - code quality and testing
dev = [
  # Linting and formatting
  "ruff",
  "mypy",
  
  # Testing framework
  "pytest",
  "pytest",
  "pytest-mock",
  "pytest-asyncio",
  "pytest-xdist",  # Parallel testing
  "pytest-gpu",     # GPU-specific testing
  
  # Type stubs for better type checking
  "types-requests",
  "types-PyYAML",
  "types-pillow",
  
  # Pre-commit hooks
  "pre-commit",
  
  # Documentation
  "mkdocs",
  "mkdocs-material",
]

# Extended data science and visualization tools
datascience = [
  "seaborn",
  "plotly",
  "bokeh",
  "altair",
  
  # Advanced data processing
  "polars",
  "pyarrow",
  "fastparquet",
  
  # Image processing
  "scikit-image",
  "opencv-python",
  "pywavelets",
  
  # Statistical analysis
  "statsmodels",
  "pingouin",
]

# Jupyter and interactive development
notebook = [
  "jupyterlab",
  "jupyterlab-widgets",
  "ipdb",
  "notebook",
  
  # Jupyter extensions
  "jupyterlab-git",
  "nbconvert",
  "nbformat",
  "jupyterlab-nvdashboard",  # GPU monitoring in Jupyter
  
  # Interactive widgets and visualization
  "ipympl",
  "plotly",
  "panel",
]

# Experiment tracking and MLOps
tracking = [
  "tensorboard",
  "wandb",
  "mlflow",
  "clearml",
  
  # Model versioning and management
  "dvc",
  "dvclive",
]

# Data acquisition and external APIs
data = [
  "kaggle",
  "huggingface-hub",
  
  # Database connectors
  "sqlalchemy",
  "psycopg2-binary",
  "pymongo",
  
  # Web scraping and APIs
  "httpx",
  "beautifulsoup4",
  "selenium",
]

# Performance profiling and debugging tools
profiling = [
  "viztracer",
  "memory-profiler",
  "py-spy",
  "line-profiler",
  "nvitop",           # Advanced GPU monitoring
  
  # GPU profiling
  "torch-tb-profiler",
  "nvidia-ml-py",
  "pynvml",
]

# Security scanning and code analysis
security = [
  "safety",
  "bandit[toml]",
  "semgrep",
]

# Audio and video processing (optional heavy dependencies)
media = [
  "librosa",
  "soundfile",
  "av",
  "ffmpeg-python",
]

# Natural language processing extensions
nlp = [
  "spacy",
  "nltk",
  "gensim",
  "textblob",
  "sentence-transformers",
  "ftfy",
]

# Computer vision extensions
cv = [
  "ultralytics",
  "timm",
  "mmcv",
  "supervision",
]

# Reinforcement Learning
rl = [
  "gymnasium",
  "stable-baselines3",
  "sb3-contrib",
  "tensorboard",
]

# Large Language Models and Text Generation
llm = [
  "openai",
  "anthropic",
  "langchain",
  "langchain-community",
  "chromadb0",
  "faiss-gpu",
]

# All extras combined for comprehensive installation
all = [
  "torch-starter[dev,datascience,notebook,tracking,data,profiling,security,media,nlp,cv,rl,llm]"
]

[project.urls]
Homepage = "https://github.com/yourusername/torch-starter"
Documentation = "https://github.com/yourusername/torch-starter#readme"
Repository = "https://github.com/yourusername/torch-starter.git"
Issues = "https://github.com/yourusername/torch-starter/issues"
Changelog = "https://github.com/yourusername/torch-starter/releases"

[project.scripts]
torch-starter = "torch_starter.cli:main"

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["torch_starter"]

[tool.hatch.version]
path = "torch_starter/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

# ==============================================================================
# RUFF CONFIGURATION - Modern Python linting and formatting
# ==============================================================================
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "notebooks/.ipynb_checkpoints",
    "data/",
    "logs/",
    "models/",
    "checkpoints/",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C90",    # mccabe complexity
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "PIE",    # flake8-pie
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented code)
    "PD",     # pandas-vet
    "NPY",    # numpy specific rules
    "PERF",   # performance improvements
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "S101",   # Use of assert detected (allow in tests)
    "T201",   # print found (allow in scripts and notebooks)
    "T203",   # pprint found 
    "S603",   # subprocess call - check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "ERA001", # Commented out code (allow for documentation)
    "PD901",  # Generic variable name for DataFrame
    "ARG002", # Unused method argument (common in inheritance)
    "PTH123", # Path.open() should be used instead of open()
    "PERF203", # try-except in loop (sometimes necessary)
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.isort]
known-first-party = ["torch_starter"]
known-third-party = ["torch", "transformers", "datasets", "numpy", "pandas", "matplotlib", "cv2", "PIL"]
force-single-line = false
lines-after-imports = 2
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002", "T201"]
"notebooks/*" = ["T201", "E402", "F401", "B018", "S101"]
"scripts/*" = ["T201", "S603", "S607"]
"**/conftest.py" = ["ARG001"]
"examples/*" = ["T201", "E402", "F401"]

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

# ==============================================================================
# MYPY CONFIGURATION - Static type checking
# ==============================================================================
[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for ML code
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
check_untyped_defs = true
pretty = true
show_error_codes = true
show_error_context = true

# Performance optimizations
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true
fast_module_lookup = true

exclude = [
    "build/",
    "dist/", 
    "notebooks/",
    "examples/",
    ".venv/",
    ".mypy_cache/",
    ".pytest_cache/",
    "__pycache__/",
    "tests/fixtures/",
    "data/",
    "logs/",
    "models/",
]

# Type checking overrides for heavy ML libraries
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*", 
    "transformers.*",
    "datasets.*",
    "accelerate.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "scipy.*",
    "cv2.*",
    "albumentations.*",
    "viztracer.*",
    "memory_profiler.*",
    "wandb.*",
    "tensorboard.*",
    "kaggle.*",
    "librosa.*",
    "spacy.*",
    "detectron2.*",
    "mmcv.*",
    "gymnasium.*",
    "stable_baselines3.*",
    "supervision.*",
    "ultralytics.*",
    "timm.*",
    "nvitop.*",
    "pynvml.*",
    "nvidia_ml_py.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

# ==============================================================================
# PYTEST CONFIGURATION - Testing framework with GPU support
# ==============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",                    # Show all test outcomes
    "--strict-markers",       # Require explicit marker registration
    "--strict-config",        # Error on unknown config options
    "--disable-warnings",     # Disable warnings by default (enable as needed)
    "--tb=short",            # Short traceback format
    "--maxfail=3",           # Stop after 3 failures
    "--durations=10",        # Show 10 slowest tests
    "--cov=torch_starter",   # Coverage reporting
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "cuda: marks tests that require CUDA (deselect with '-m \"not cuda\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
    "memory_intensive: marks tests that use significant GPU memory",
    "multi_gpu: marks tests that require multiple GPUs",
]

# Test discovery patterns
norecursedirs = [
    ".*",
    "build", 
    "dist",
    "venv",
    ".venv",
    "node_modules",
    "data",
    "logs",
    "models",
    "checkpoints",
]

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*CUDA.*:UserWarning",
    "ignore:.*PyTorch.*:UserWarning",
    "ignore:.*torch.*:UserWarning",
    "ignore::FutureWarning:transformers.*",
]

# ==============================================================================
# COVERAGE CONFIGURATION - Test coverage reporting
# ==============================================================================
[tool.coverage.run]
source = ["torch_starter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/verify_setup/*",
    "*/scripts/*",
    "*/examples/*",
    ".venv/*",
    "build/*",
    "dist/*",
    "*/benchmarks/*",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.paths]
source = ["torch_starter/", ".tox/*/site-packages/torch_starter/"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ==============================================================================
# UV CONFIGURATION - Fast Python package manager with CUDA support
# ==============================================================================
[tool.uv]
index-strategy = "unsafe-best-match"
resolution = "highest"
compile-bytecode = true
link-mode = "copy"
concurrent-downloads = 20
keyring-provider = "subprocess"

[tool.uv.sources]
torch = { index = "pytorch-cu126" }
torchvision = { index = "pytorch-cu126" }
torchaudio = { index = "pytorch-cu126" }

[tool.uv.indexes]
pypi = { url = "https://pypi.org/simple" }
pytorch-cu121 = { url = "https://download.pytorch.org/whl/cu126" }

# ==============================================================================
# BANDIT CONFIGURATION - Security linting
# ==============================================================================
[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist", "notebooks", "examples"]
skips = ["B101", "B601", "B602", "B603"]  # Skip assert, shell usage warnings

[tool.bandit.assert_used]
skips = ["**/test_*.py", "tests/**", "notebooks/**"]

# ==============================================================================
# BLACK CONFIGURATION - Code formatting (fallback if Ruff unavailable)
# ==============================================================================
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | notebooks/\.ipynb_checkpoints
  | data
  | logs
  | models
)/
'''