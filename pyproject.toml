[project]
name = "torch-starter"
version = "0.1.0"
description = "CUDA-enabled PyTorch deep learning development environment with uv, CUDA 12.4, and VS Code Dev Containers."
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@domain.com" }]
maintainers = [{ name = "Your Name", email = "your.email@domain.com" }]
keywords = ["deep-learning", "pytorch", "transformers", "cuda", "gpu", "uv", "devcontainer"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies - essential packages for data science and ML
dependencies = [
  # Core scientific computing stack
  "numpy>=1.26,<2.1",
  "pandas>=2.2,<2.3",
  "scipy>=1.12,<1.15",
  
  # Machine learning essentials  
  "scikit-learn>=1.4,<1.6",
  "tqdm>=4.66,<5.0",
  
  # Deep learning ecosystem (CPU versions - GPU versions in extras)
  "transformers>=4.44,<4.46",
  "datasets>=2.19,<3.1",
  "accelerate>=0.33,<1.0",
  "safetensors>=0.4.2,<1.0",
  
  # Tokenization and text processing
  "sentencepiece>=0.2,<1.0",
  "tokenizers>=0.19,<1.0",
  
  # Image processing
  "pillow>=10.0,<11.0",
  "albumentations>=1.4,<2.0",
  
  # Visualization essentials (minimal for performance)
  "matplotlib>=3.8,<3.10",
  
  # Jupyter essentials
  "jupyter>=1.0,<2.0",
  "ipykernel>=6.29,<7.0",
  "ipywidgets>=8.1,<9.0",
  
  # Configuration and utilities
  "pyyaml>=6.0,<7.0",
  "requests>=2.32,<3.0",
  "python-dotenv>=1.0,<2.0",
  
  # Development utilities
  "rich>=13.7,<14.0",
  "typer>=0.12,<1.0",
]

[project.optional-dependencies]
# PyTorch with CUDA 12.4 support - primary ML framework
torch-cu124 = [
  # Use PyTorch CUDA 12.4 index for GPU support
  "--index-url https://download.pytorch.org/whl/cu124",
  "torch>=2.4.0,<2.6",
  "torchvision>=0.19.0,<0.21", 
  "torchaudio>=2.4.0,<2.6",
  # Additional PyTorch ecosystem
  "torchtext>=0.18.0,<0.19",
  "lightning>=2.4,<3.0",
]

# Development tools - code quality and testing
dev = [
  # Linting and formatting
  "ruff>=0.6.0,<1.0",
  "mypy>=1.11,<2.0",
  
  # Testing framework
  "pytest>=8.3,<9.0",
  "pytest-cov>=5.0,<6.0",
  "pytest-mock>=3.14,<4.0",
  "pytest-asyncio>=0.23,<1.0",
  "pytest-xdist>=3.6,<4.0",  # Parallel testing
  
  # Type stubs for better type checking
  "types-requests>=2.32,<3.0",
  "types-PyYAML>=6.0,<7.0",
  "types-pillow>=10.0,<11.0",
  
  # Pre-commit hooks
  "pre-commit>=3.8,<4.0",
  
  # Documentation
  "mkdocs>=1.6,<2.0",
  "mkdocs-material>=9.5,<10.0",
]

# Extended data science and visualization tools
datascience = [
  "seaborn>=0.13,<1.0",
  "plotly>=5.22,<6.0",
  "bokeh>=3.4,<4.0",
  "altair>=5.4,<6.0",
  
  # Advanced data processing
  "polars>=1.0,<2.0",
  "pyarrow>=17.0,<18.0",
  "fastparquet>=2024.5.0,<2025.0.0",
  
  # Image processing
  "scikit-image>=0.24,<1.0",
  "opencv-python>=4.10,<5.0",
  "pywavelets>=1.6,<2.0",
  
  # Statistical analysis
  "statsmodels>=0.14,<1.0",
  "pingouin>=0.5,<1.0",
]

# Jupyter and interactive development
notebook = [
  "jupyterlab>=4.2,<5.0",
  "jupyterlab-widgets>=3.0,<4.0",
  "ipdb>=0.13,<1.0",
  "notebook>=7.2,<8.0",
  
  # Jupyter extensions
  "jupyterlab-git>=0.50,<1.0",
  "nbconvert>=7.16,<8.0",
  "nbformat>=5.10,<6.0",
  
  # Interactive widgets and visualization
  "ipympl>=0.9,<1.0",
  "plotly>=5.22,<6.0",
]

# Experiment tracking and MLOps
tracking = [
  "tensorboard>=2.17,<3.0",
  "wandb>=0.17,<1.0",
  "mlflow>=2.15,<3.0",
  
  # Model versioning and management
  "dvc>=3.50,<4.0",
  "dvclive>=3.40,<4.0",
]

# Data acquisition and external APIs
data = [
  "kaggle>=1.6,<2.0",
  "huggingface-hub>=0.24,<1.0",
  
  # Database connectors
  "sqlalchemy>=2.0,<3.0",
  "psycopg2-binary>=2.9,<3.0",
  "pymongo>=4.8,<5.0",
  
  # Web scraping and APIs
  "httpx>=0.27,<1.0",
  "beautifulsoup4>=4.12,<5.0",
  "selenium>=4.23,<5.0",
]

# Performance profiling and debugging tools
profiling = [
  "viztracer>=0.16,<1.0",
  "memory-profiler>=0.61,<1.0",
  "py-spy>=0.3,<1.0",
  "line-profiler>=4.1,<5.0",
  
  # GPU profiling
  "torch-tb-profiler>=0.4,<1.0",
  "nvidia-ml-py>=12.0,<13.0",
]

# Security scanning and code analysis
security = [
  "safety>=3.2,<4.0",
  "bandit[toml]>=1.7,<2.0",
  "semgrep>=1.45,<2.0",
]

# Audio and video processing (optional heavy dependencies)
media = [
  "librosa>=0.10,<1.0",
  "soundfile>=0.12,<1.0",
  "av>=12.3,<13.0",
  "ffmpeg-python>=0.2,<1.0",
]

# Natural language processing extensions
nlp = [
  "spacy>=3.7,<4.0",
  "nltk>=3.9,<4.0",
  "gensim>=4.3,<5.0",
  "textblob>=0.18,<1.0",
]

# Computer vision extensions  
cv = [
  "ultralytics>=8.2,<9.0",
  "detectron2 @ git+https://github.com/facebookresearch/detectron2.git",
  "timm>=1.0,<2.0",
  "mmcv>=2.1,<3.0",
]

# All extras combined for comprehensive installation
all = [
  "torch-starter[dev,datascience,notebook,tracking,data,profiling,security,media,nlp,cv]"
]

[project.urls]
Homepage = "https://github.com/yourusername/torch-starter"
Documentation = "https://github.com/yourusername/torch-starter#readme"
Repository = "https://github.com/yourusername/torch-starter.git"
Issues = "https://github.com/yourusername/torch-starter/issues"
Changelog = "https://github.com/yourusername/torch-starter/releases"

[project.scripts]
torch-starter = "torch_starter.cli:main"

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["torch_starter"]

[tool.hatch.version]
path = "torch_starter/__init__.py"

# ==============================================================================
# RUFF CONFIGURATION - Modern Python linting and formatting
# ==============================================================================
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "notebooks/.ipynb_checkpoints",
    "data/",
    "logs/",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C90",    # mccabe complexity
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "PIE",    # flake8-pie
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented code)
    "PD",     # pandas-vet
    "NPY",    # numpy specific rules
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "S101",   # Use of assert detected (allow in tests)
    "T201",   # print found (allow in scripts and notebooks)
    "T203",   # pprint found 
    "S603",   # subprocess call - check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "ERA001", # Commented out code (allow for documentation)
    "PD901",  # Generic variable name for DataFrame
    "ARG002", # Unused method argument (common in inheritance)
    "PTH123", # Path.open() should be used instead of open()
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.isort]
known-first-party = ["torch_starter"]
known-third-party = ["torch", "transformers", "datasets", "numpy", "pandas"]
force-single-line = false
lines-after-imports = 2
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]
"notebooks/*" = ["T201", "E402", "F401"]
"scripts/*" = ["T201", "S603", "S607"]
"**/conftest.py" = ["ARG001"]

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

# ==============================================================================
# MYPY CONFIGURATION - Static type checking
# ==============================================================================
[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for ML code
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
check_untyped_defs = true
pretty = true
show_error_codes = true
show_error_context = true

# Performance optimizations
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true
fast_module_lookup = true

exclude = [
    "build/",
    "dist/", 
    "notebooks/",
    ".venv/",
    ".mypy_cache/",
    ".pytest_cache/",
    "__pycache__/",
    "tests/fixtures/",
]

# Type checking overrides for heavy ML libraries
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*", 
    "transformers.*",
    "datasets.*",
    "accelerate.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "scipy.*",
    "cv2.*",
    "albumentations.*",
    "viztracer.*",
    "memory_profiler.*",
    "wandb.*",
    "tensorboard.*",
    "kaggle.*",
    "librosa.*",
    "spacy.*",
    "detectron2.*",
    "mmcv.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

# ==============================================================================
# PYTEST CONFIGURATION - Testing framework
# ==============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",                    # Show all test outcomes
    "--strict-markers",       # Require explicit marker registration
    "--strict-config",        # Error on unknown config options
    "--disable-warnings",     # Disable warnings by default (enable as needed)
    "--tb=short",            # Short traceback format
    "--maxfail=3",           # Stop after 3 failures
    "--durations=10",        # Show 10 slowest tests
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
]

# Test discovery patterns
norecursedirs = [
    ".*",
    "build", 
    "dist",
    "venv",
    ".venv",
    "node_modules",
    "data",
    "logs",
]

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*CUDA.*:UserWarning",
    "ignore:.*PyTorch.*:UserWarning",
]

# ==============================================================================
# COVERAGE CONFIGURATION - Test coverage reporting
# ==============================================================================
[tool.coverage.run]
source = ["torch_starter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/verify_setup/*",
    "*/scripts/*",
    ".venv/*",
    "build/*",
    "dist/*",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.paths]
source = ["torch_starter/", ".tox/*/site-packages/torch_starter/"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ==============================================================================
# UV CONFIGURATION - Fast Python package manager
# ==============================================================================
[tool.uv]
index-strategy = "unsafe-best-match"
resolution = "highest"
compile-bytecode = true
link-mode = "copy"
concurrent-downloads = 10
http-timeout = 300
keyring-provider = "subprocess"

# Default dependency groups to install
default-groups = ["dev"]

# Index configuration for package sources
[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"
default = true

# PyTorch CUDA 12.4 wheels index
[[tool.uv.index]] 
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

# ==============================================================================
# BANDIT CONFIGURATION - Security linting
# ==============================================================================
[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101", "B601", "B602", "B603"]  # Skip assert, shell usage warnings

[tool.bandit.assert_used]
skips = ["**/test_*.py", "tests/**"]

# ==============================================================================
# BLACK CONFIGURATION - Code formatting (fallback if Ruff unavailable)
# ==============================================================================
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | notebooks/\.ipynb_checkpoints
)/
'''