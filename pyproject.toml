[project]
name = "torch-starter"
version = "0.1.0"
description = "Optimized Deep Learning starter template with uv, CUDA 12.6 PyTorch, and VS Code Dev Containers."
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
authors = [{ name = "Your Name" }]
keywords = ["deep-learning", "pytorch", "transformers", "uv", "devcontainer"]

# Minimal core dependencies - only essentials for performance
dependencies = [
  # Deep learning core
  "transformers>=4.42,<5.0",
  "datasets>=2.19,<3.0",
  "accelerate>=0.31,<1.0",
  "safetensors>=0.4,<1.0",
  "torchvision>=0.21.0",
  "torchaudio>=2.6.0",
  "albumentations>=1.3.1,<2.0",
  # Core scientific computing
  "numpy>=1.26,<2.0",
  "pandas>=2.0,<3.0",
  "scipy>=1.11,<2.0",
  # Machine learning essentials
  "scikit-learn>=1.3,<2.0",
  "tqdm>=4.66.0",
  # Tokenization
  "sentencepiece>=0.1.99",
  # Visualization (minimal)
  "matplotlib>=3.7.0",
  "plotly>=5.0.0",
  "seaborn>=0.12.0",
  # Jupyter minimal
  "jupyter>=1.0,<2.0",
  "ipykernel>=6.29,<7.0",
  # Configuration and utilities
  "pyyaml>=6.0,<7.0",
  "requests>=2.32.0,<3.0",
  "viztracer>=0.17.1",
  # Environment management
  "python-dotenv>=1.0,<2.0",
]

[project.optional-dependencies]
# Development tools - minimal set
dev = [
  "ruff>=0.5.0",
  "mypy>=1.10.0",
  "pydantic>=2.8.0",
  "pytest>=8.0.0",
  "pytest-cov>=5.0.0",
  "types-requests>=2.32.0",
  "types-PyYAML>=6.0.12",
  "pre-commit>=3.7.0",
  "memory-profiler>=0.61.0",
  "safety>=3.2.0",
]

# Extended data science tools (optional)
datascience = [
  "seaborn>=0.13,<1.0",
  "plotly>=5.0,<6.0",
  "scikit-image>=0.24.0,<1.0",
  "pywavelets>=1.4.0,<2.0",
]

# Notebook and lab tools (optional)
notebook = [
  "jupyterlab>=4.2.0",
  "ipdb>=0.13.13",
  "notebook>=7.2.0",
]

# Experiment tracking (optional)
tracking = [
  "tensorboard>=2.16.0",
  "wandb>=0.17.0",
]

# Data acquisition (optional)
data = [
  "kaggle>=1.6.0",
]

# Profiling tools (optional) 
profiling = [
  "viztracer>=0.17.1",
  "memory-profiler>=0.61.0",
]

# Security scanning (optional)
security = [
  "safety>=3.2.0",
  "bandit>=1.7.5",
]

# CUDA 12.6 specific PyTorch
torch-cu126 = [
  "torch>=2.5.0",
  "torchvision>=0.21.0", 
  "torchaudio>=2.6.0",
]

# CPU-only PyTorch (for compatibility)
torch-cpu = [
  "torch>=2.5.0+cpu",
  "torchvision>=0.21.0+cpu",
  "torchaudio>=2.6.0+cpu",
]

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["torch_starter"]

# Ruff configuration - optimized
[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = [
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "notebooks/.ipynb_checkpoints"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C90", # mccabe complexity
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "S101",  # Use of assert detected
    "T201",  # print found (allow in notebooks and scripts)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["torch_starter"]
force-single-line = false

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# MyPy configuration - performance optimized
[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
pretty = true

# Performance optimizations
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true

exclude = [
    "build/",
    "dist/", 
    "notebooks/",
    ".venv/",
    ".mypy_cache/",
    ".pytest_cache/",
    "__pycache__/"
]

# Skip type checking for heavy dependencies to improve performance
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*", 
    "transformers.*",
    "datasets.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "viztracer.*",
    "memory_profiler.*",
    "albumentations.*",
    "sentencepiece.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["torch_starter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/verify_setup/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# UV configuration
[tool.uv]
index-strategy = "unsafe-best-match"
resolution = "highest"
compile-bytecode = true
link-mode = "copy"
concurrent-downloads = 10

# PyTorch CUDA 12.6 index
[[tool.uv.index]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

# Primary index: PyPI (default)
[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"
default = true