# syntax=docker/dockerfile:1.7

# Fast debug build for CUDA-enabled PyTorch development environment
# Optimized for 2-3 minute builds with essential components only

# ==============================================================================
# CUDA Base Stage - NVIDIA CUDA runtime (same as production)
# ==============================================================================
FROM nvidia/cuda:12.6.1-cudnn-devel-ubuntu24.04 AS cuda-base

# Build arguments for cache control and versioning
ARG BUILDKIT_INLINE_CACHE=1
ARG PYTHON_VERSION=3.12
ARG CUDA_VERSION=12.6.1
ARG APP_USER=ubuntu
ARG APP_UID=1000
ARG APP_GID=1000

# CUDA and system environment setup
ENV DEBIAN_FRONTEND=noninteractive \
    CUDA_VERSION=${CUDA_VERSION} \
    CUDA_HOME=/usr/local/cuda \
    CUDA_ROOT=/usr/local/cuda \
    PATH=/usr/local/cuda/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/compat:${LD_LIBRARY_PATH} \
    LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LIBRARY_PATH} \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    NVIDIA_REQUIRE_CUDA="cuda>=12.6.1" \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Quick CUDA setup - minimal verification
RUN ln -sf /usr/local/cuda-12.6.1 /usr/local/cuda && \
    echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf && \
    ldconfig

# ==============================================================================
# System Dependencies Stage - Essential tools only for debug
# ==============================================================================
FROM cuda-base AS system-deps

# Minimal system package installation for fast builds
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    # Essential development tools only
    ca-certificates curl git wget unzip \
    # Build essentials for Python packages
    build-essential pkg-config \
    # SSH and process management
    openssh-client tini sudo \
    # Basic debugging tools
    htop \
    # Cleanup in same layer
    && rm -rf /var/lib/apt/lists/*

# ==============================================================================
# User Setup Stage - Create non-root user
# ==============================================================================
FROM system-deps AS user-setup

# Use existing ubuntu user (UID 1000) and configure for development
RUN usermod -aG sudo ${APP_USER} && \
    echo "${APP_USER} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    # Create essential directories only
    mkdir -p \
    /home/${APP_USER}/.cache/torch \
    /home/${APP_USER}/.cache/uv \
    /home/${APP_USER}/.local/bin \
    /workspaces && \
    chown -R ${APP_USER}:${APP_USER} /home/${APP_USER} /workspaces

# ==============================================================================
# UV Package Manager Stage - Fast UV installation
# ==============================================================================
FROM user-setup AS uv-install

# Switch to non-root user
USER ${APP_USER}
ENV HOME=/home/${APP_USER}
WORKDIR /workspaces

# UV installation and configuration
ENV UV_INSTALL_DIR=/home/${APP_USER}/.local/bin \
    UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=manual \
    UV_CONCURRENT_DOWNLOADS=10 \
    PATH=/home/${APP_USER}/.local/bin:${PATH}

# Install UV with cache mounting
RUN --mount=type=cache,target=/home/${APP_USER}/.cache/uv,uid=${APP_UID},gid=${APP_GID} \
    curl -LsSf https://astral.sh/uv/install.sh | sh

# ==============================================================================
# Python Environment Stage - Fast Python setup
# ==============================================================================
FROM uv-install AS python-env

# Python performance environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install Python and create virtual environment
RUN --mount=type=cache,target=/home/${APP_USER}/.cache/uv,uid=${APP_UID},gid=${APP_GID} \
    uv python install ${PYTHON_VERSION} && \
    uv venv --clear .venv -p ${PYTHON_VERSION} && \
    echo "source /workspaces/.venv/bin/activate" >> ~/.bashrc

# ==============================================================================
# Debug Dependencies Stage - Essential packages only
# ==============================================================================
FROM python-env AS deps-install

# Copy dependency files for caching
COPY --chown=${APP_USER}:${APP_USER} pyproject.toml uv.lock* ./

# Install essential dependencies only for debug environment
RUN --mount=type=cache,target=/home/${APP_USER}/.cache/uv,uid=${APP_UID},gid=${APP_GID} \
    . .venv/bin/activate && \
    uv sync \
    --no-install-project \
    --index-strategy unsafe-best-match \
    --extra dev \
    --extra torch-cu126 \
    --compile-bytecode && \
    # Quick PyTorch verification (skip if fails to keep build fast)
    python -c "import torch; print(f'PyTorch {torch.__version__} with CUDA {torch.version.cuda}')" || echo "PyTorch verification will complete at runtime"

# ==============================================================================
# Final Debug Stage - Minimal project setup
# ==============================================================================
FROM deps-install AS final

# Copy project for development
COPY --chown=${APP_USER}:${APP_USER} . .

# Install project in development mode
RUN . .venv/bin/activate && \
    uv pip install -e . --compile-bytecode && \
    echo "Debug environment ready"

# ==============================================================================
# Debug Runtime Configuration
# ==============================================================================

# Expose essential development ports
EXPOSE 8888 8000

# Simple health check for debug
HEALTHCHECK --interval=120s --timeout=5s --start-period=10s --retries=1 \
    CMD . .venv/bin/activate && python -c "import torch; exit(0)" || exit 1

# Set up container entrypoint
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["/bin/bash", "-l"]

# ==============================================================================
# Debug Environment Labels and Variables
# ==============================================================================
LABEL org.opencontainers.image.title="torch_starter-debug" \
    org.opencontainers.image.description="Fast debug build for CUDA-enabled PyTorch development" \
    org.opencontainers.image.version="debug-cuda12.6.1" \
    cuda.version="12.6.1" \
    build.type="debug"

# Essential environment variables for debugging
ENV PYTHONPATH=/workspaces:${PYTHONPATH} \
    # Cache locations
    TORCH_HOME=/home/${APP_USER}/.cache/torch \
    # Performance optimizations for debug
    OMP_NUM_THREADS=2 \
    MKL_NUM_THREADS=2 \
    TORCH_NUM_THREADS=2