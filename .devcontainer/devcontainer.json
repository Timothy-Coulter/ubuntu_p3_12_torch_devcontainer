{
  "name": "torch_starter-cuda-volume-enhanced (PyTorch 2.8.0, CUDA 12.9, UV, System Python)",
  "build": {
    "dockerfile": "Dockerfile",
    "context": ".",
    "options": [
      "--build-arg",
      "BUILDKIT_INLINE_CACHE=1",
      "--build-arg",
      "CUDA_VERSION=12.9",
      "--build-arg",
      "PYTORCH_VERSION=2.8.0",
      "--platform=linux/amd64"
    ]
  },
  "runArgs": [
    "--gpus",
    "all",
    "--shm-size=16g",
    "--ulimit",
    "memlock=-1",
    "--ulimit",
    "stack=67108864",
    "--cap-add",
    "SYS_PTRACE",
    "--security-opt",
    "seccomp=unconfined",
    "--ipc=host",
    "--memory=32g",
    "--memory-swap=40g",
    "--oom-kill-disable=false",
    "--device-cgroup-rule=c 195:* rmw"
  ],
  "containerUser": "ubuntu",
  "workspaceFolder": "/workspaces/torch-starter",
  "workspaceMount": "source=torch-starter-workspace,target=/workspaces/torch-starter,type=volume",
  "containerEnv": {
    "HF_HOME": "/home/ubuntu/.cache/huggingface",
    "TRANSFORMERS_CACHE": "/home/ubuntu/.cache/huggingface",
    "TORCH_HOME": "/home/ubuntu/.cache/torch",
    "KAGGLE_CONFIG_DIR": "/home/ubuntu/.kaggle",
    "UV_LINK_MODE": "copy",
    "UV_COMPILE_BYTECODE": "1",
    "UV_CONCURRENT_DOWNLOADS": "20",
    "UV_HTTP_TIMEOUT": "600",
    "UV_SYSTEM_PYTHON": "1",
    "UV_PYTHON_DOWNLOADS": "never",
    "UV_CACHE_DIR": "/home/ubuntu/.cache/uv",
    "PYTHONDONTWRITEBYTECODE": "1",
    "PYTHONUNBUFFERED": "1",
    "PYTHONOPTIMIZE": "1",
    "PYTHONFAULTHANDLER": "1",
    "PYTHONHASHSEED": "random",
    "CUDA_VERSION": "12.9",
    "PYTORCH_VERSION": "2.8.0",
    "CUDA_VISIBLE_DEVICES": "all",
    "NVIDIA_VISIBLE_DEVICES": "all",
    "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
    "NVIDIA_REQUIRE_CUDA": "cuda>=12.9",
    "TORCH_CUDA_ARCH_LIST": "7.0;7.5;8.0;8.6;8.9;9.0",
    "FORCE_CUDA": "1",
    "PYTORCH_CUDA_ALLOC_CONF": "max_split_size_mb:1024,garbage_collection_threshold:0.6,expandable_segments:True",
    "CUDA_LAUNCH_BLOCKING": "0",
    "CUDA_CACHE_DISABLE": "0",
    "CUDA_CACHE_MAXSIZE": "2147483648",
    "MALLOC_ARENA_MAX": "4",
    "MALLOC_MMAP_THRESHOLD_": "131072",
    "MALLOC_TRIM_THRESHOLD_": "131072",
    "WORKSPACE_NAME": "torch-starter",
    "DEVELOPMENT_MODE": "1",
    "CONTAINER_ENHANCED": "true"
  },
  "mounts": [
    {
      "source": "torch-starter-hf-cache",
      "target": "/home/ubuntu/.cache/huggingface",
      "type": "volume"
    },
    {
      "source": "torch-starter-torch-cache",
      "target": "/home/ubuntu/.cache/torch",
      "type": "volume"
    },
    {
      "source": "torch-starter-kaggle-cache",
      "target": "/home/ubuntu/.kaggle",
      "type": "volume"
    },
    {
      "source": "torch-starter-data",
      "target": "/workspaces/torch-starter/data",
      "type": "volume"
    },
    {
      "source": "torch-starter-uv-cache",
      "target": "/home/ubuntu/.cache/uv",
      "type": "volume"
    },
    {
      "source": "torch-starter-pip-cache",
      "target": "/home/ubuntu/.cache/pip",
      "type": "volume"
    },
    {
      "source": "torch-starter-models",
      "target": "/home/ubuntu/.cache/models",
      "type": "volume"
    }
  ],
  "initializeCommand": [
    "bash",
    "-c",
    "echo 'üèóÔ∏è  Initializing Docker volumes with proper permissions...' && docker volume create torch-starter-workspace 2>/dev/null || true && docker volume create torch-starter-hf-cache 2>/dev/null || true && docker volume create torch-starter-torch-cache 2>/dev/null || true && docker volume create torch-starter-kaggle-cache 2>/dev/null || true && docker volume create torch-starter-data 2>/dev/null || true && docker volume create torch-starter-uv-cache 2>/dev/null || true && docker volume create torch-starter-pip-cache 2>/dev/null || true && docker volume create torch-starter-models 2>/dev/null || true && echo '‚úÖ Docker volumes ready for torch-starter' && echo 'üîß Setting up volume permissions...' && for vol in torch-starter-workspace torch-starter-hf-cache torch-starter-torch-cache torch-starter-kaggle-cache torch-starter-data torch-starter-uv-cache torch-starter-pip-cache torch-starter-models; do docker run --rm -v $vol:/vol alpine:latest chown -R 1000:1000 /vol 2>/dev/null || echo \"  ‚ö†Ô∏è  Could not set permissions for $vol (may be normal)\"; done && echo '‚úÖ Volume permissions configured'"
  ],
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "configureZshAsDefaultShell": true,
      "upgradePackages": false,
      "username": "ubuntu",
      "userUid": 1000,
      "userGid": 1000
    },
    "ghcr.io/devcontainers/features/git:1": {
      "ppa": false,
      "version": "os-provided"
    }
  },
  "postCreateCommand": {
    "welcome": "echo 'üöÄ Enhanced PyTorch DevContainer Starting...'",
    "verify-volumes": "bash -c 'echo \"üìÅ Verifying volume mounts...\"; ls -la /workspaces/torch-starter/ && echo \"‚úÖ Workspace volume mounted\" || echo \"‚ö†Ô∏è  Workspace volume issue\"'",
    "clone-and-setup": "bash -c 'if [ ! -f \"/workspaces/torch-starter/pyproject.toml\" ]; then echo \"üîÑ Repository not found, cloning...\"; cd /workspaces && rm -rf torch-starter/* torch-starter/.[!.]* 2>/dev/null || true; git clone https://github.com/yourusername/torch-starter.git /tmp/torch-starter && cp -r /tmp/torch-starter/* /tmp/torch-starter/.[!.]* /workspaces/torch-starter/ 2>/dev/null || true && rm -rf /tmp/torch-starter && echo \"‚úÖ Repository cloned\"; else echo \"‚úÖ Repository already present\"; fi'",
    "verify-environment": "bash -c 'cd /workspaces/torch-starter && echo \"üêç Using system Python with UV...\" && python -c \"import sys; print(f\\\"‚úÖ Python {sys.version.split()[0]}\\\")\" && python -c \"import torch; print(f\\\"üî• PyTorch {torch.__version__}\\\"); print(f\\\"üöÄ CUDA Available: {torch.cuda.is_available()}\\\"); print(f\\\"üì± CUDA Devices: {torch.cuda.device_count()}\\\") if torch.cuda.is_available() else print(\\\"‚ö†Ô∏è  CUDA Not Available - CPU mode only\\\")\" && uv --version && echo \"üì¶ UV Package Manager ready\"'",
    "install-project": "bash -c 'cd /workspaces/torch-starter && if [ -f \"pyproject.toml\" ]; then echo \"üì¶ Installing project dependencies...\"; timeout 300 uv pip install --system -e . || echo \"‚ö†Ô∏è  Installation timeout or failed - you may need to run manually\"; echo \"‚úÖ Project dependencies installation attempted\"; else echo \"‚ö†Ô∏è  pyproject.toml not found, skipping project installation\"; fi'",
    "setup-jupyter-kernel": "bash -c 'cd /workspaces/torch-starter && PYTHON_VERSION=$(python -c \"import sys; print(f\\\"{sys.version_info.major}.{sys.version_info.minor}\\\")\" 2>/dev/null || echo \"3.11\") && python -m ipykernel install --user --name \"torch_starter-${PYTHON_VERSION}\" --display-name \"Python ${PYTHON_VERSION} (torch_starter)\" 2>/dev/null || echo \"‚ö†Ô∏è  Jupyter kernel setup will be done after project installation\"'",
    "setup-git": "bash -c 'cd /workspaces/torch-starter && git config --global --add safe.directory /workspaces/torch-starter && git config --global init.defaultBranch main 2>/dev/null || true'",
    "verify-cuda": "bash -c 'if command -v nvidia-smi >/dev/null 2>&1; then echo \"üñ•Ô∏è  GPU Information:\"; timeout 10 nvidia-smi --query-gpu=name,memory.total,compute_cap --format=csv,noheader 2>/dev/null || echo \"GPU query timeout - GPU may not be available\"; echo \"üìä GPU Driver Info:\"; timeout 5 nvidia-smi --query-gpu=driver_version --format=csv,noheader 2>/dev/null || echo \"Driver query timeout\"; else echo \"‚ö†Ô∏è  nvidia-smi not available - GPU may not be accessible (normal for CPU-only setups)\"; fi'",
    "create-env-template": "bash -c 'cd /workspaces/torch-starter && if [ ! -f \".env.local\" ] && [ -f \".env.example\" ]; then echo \"üìù Creating .env.local template from .env.example...\"; cp .env.example .env.local && chmod 600 .env.local && echo \"‚úÖ .env.local created (edit with your API keys)\"; fi'",
    "final-check": "bash -c 'cd /workspaces/torch-starter && echo \"üîç Final environment check...\" && python -c \"import torch, transformers, datasets; print(f\\\"‚úÖ Core libraries: PyTorch {torch.__version__}, Transformers {transformers.__version__}, Datasets {datasets.__version__}\\\")\" 2>/dev/null || echo \"‚ö†Ô∏è  Some core libraries may not be available yet - run install-project if needed\"'"
  },
  "postStartCommand": "bash -c 'cd /workspaces/torch-starter && echo \"üöÄ Enhanced volume-based development environment ready!\" && echo \"üí° Workspace: $(pwd)\" && echo \"üí° Use \\\"uv-install <package>\\\" to install packages\" && echo \"üí° Use \\\"gpu-monitor\\\" for GPU monitoring\" && echo \"üí° Use \\\"system-info\\\" for diagnostics\" && if [ -f \"pyproject.toml\" ]; then echo \"‚úÖ Project ready for development\"; else echo \"‚ö†Ô∏è  Clone your repository into this volume to get started\"; fi && echo \"üîß Run ./dev.sh verify-setup for comprehensive diagnostics\"'",
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.debugpy",
        "ms-toolsai.jupyter",
        "ms-toolsai.vscode-ai-remote",
        "ms-toolsai.tensorboard",
        "charliermarsh.ruff",
        "ms-python.mypy-type-checker",
        "eamodio.gitlens",
        "GitHub.copilot",
        "GitHub.copilot-chat",
        "EditorConfig.EditorConfig",
        "ms-azuretools.vscode-docker",
        "RooVeterinaryInc.roo-cline",
        "mechatroner.rainbow-csv",
        "gaogaotiantian.viztracer-vscode",
        "bierner.markdown-mermaid",
        "redhat.vscode-yaml",
        "ms-vscode.vscode-json",
        "formulahendry.code-runner",
        "ms-vscode.hexeditor"
      ],
      "settings": {
        "python.defaultInterpreterPath": "/opt/conda/bin/python",
        "python.terminal.activateEnvironment": false,
        "python.analysis.typeCheckingMode": "strict",
        "python.analysis.autoImportCompletions": true,
        "python.analysis.indexing": true,
        "python.analysis.extraPaths": [
          "/workspaces/torch-starter"
        ],
        "python.analysis.packageIndexDepths": [
          {
            "name": "sklearn",
            "depth": 2
          },
          {
            "name": "torch",
            "depth": 3
          },
          {
            "name": "transformers",
            "depth": 2
          },
          {
            "name": "datasets",
            "depth": 2
          },
          {
            "name": "numpy",
            "depth": 2
          }
        ],
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.testing.pytestArgs": [
          "tests",
          "--no-header",
          "--tb=short",
          "-q"
        ],
        "ruff.enable": true,
        "ruff.organizeImports": true,
        "ruff.serverEnabled": true,
        "ruff.lint.enable": true,
        "ruff.format.enable": true,
        "ruff.configuration": "/workspaces/torch-starter/pyproject.toml",
        "files.watcherExclude": {
          "**/__pycache__/**": true,
          "**/.mypy_cache/**": true,
          "**/.ruff_cache/**": true,
          "**/.pytest_cache/**": true,
          "**/node_modules/**": true,
          "**/.cache/**": true,
          "**/data/**": true,
          "**/logs/**": true,
          "**/models/**": true,
          "**/checkpoints/**": true,
          "**/*.log": true,
          "**/*.bin": true,
          "**/*.safetensors": true
        },
        "search.exclude": {
          "**/__pycache__": true,
          "**/.mypy_cache": true,
          "**/.ruff_cache": true,
          "**/.cache": true,
          "**/data": true,
          "**/logs": true,
          "**/models": true,
          "**/checkpoints": true
        },
        "files.exclude": {
          "**/__pycache__": true,
          "**/.mypy_cache": true,
          "**/.ruff_cache": true,
          "**/.pytest_cache": true
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "terminal.integrated.shellIntegration.enabled": true,
        "terminal.integrated.cwd": "/workspaces/torch-starter",
        "terminal.integrated.env.linux": {
          "CUDA_VISIBLE_DEVICES": "all",
          "PYTORCH_CUDA_ALLOC_CONF": "max_split_size_mb:1024,garbage_collection_threshold:0.6,expandable_segments:True",
          "CUDA_LAUNCH_BLOCKING": "0",
          "UV_SYSTEM_PYTHON": "1",
          "UV_PYTHON_DOWNLOADS": "never"
        },
        "jupyter.askForKernelRestart": false,
        "jupyter.defaultKernel": "torch_starter-3.11",
        "jupyter.notebookFileRoot": "/workspaces/torch-starter",
        "jupyter.enableExtendedKernelCompletions": true,
        "jupyter.kernels.excludePythonEnvironments": [],
        "notebook.experimental.openGettingStarted": false,
        "notebook.kernelProviderAssociations": [
          {
            "viewType": "jupyter-notebook",
            "kernelspec": "torch_starter-3.11"
          }
        ],
        "git.enableSmartCommit": true,
        "git.autofetch": true,
        "git.defaultCloneDirectory": "/workspaces",
        "git.ignoreLimitWarning": true,
        "extensions.autoUpdate": false,
        "telemetry.telemetryLevel": "off",
        "editor.formatOnSave": true,
        "editor.inlayHints.enabled": "offUnlessPressed",
        "editor.codeActionsOnSave": {
          "source.organizeImports.ruff": "explicit",
          "source.fixAll.ruff": "explicit"
        },
        "editor.rulers": [
          88,
          100
        ],
        "workbench.colorTheme": "Default Dark+",
        "workbench.preferredDarkColorTheme": "Default Dark+",
        "workbench.preferredLightColorTheme": "Default Light+",
        "[python]": {
          "editor.defaultFormatter": "charliermarsh.ruff",
          "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit",
            "source.fixAll": "explicit"
          },
          "editor.formatOnSave": true
        },
        "[json]": {
          "editor.defaultFormatter": "vscode.json-language-features"
        },
        "[jsonc]": {
          "editor.defaultFormatter": "vscode.json-language-features"
        },
        "[dockerfile]": {
          "editor.defaultFormatter": "ms-azuretools.vscode-docker"
        },
        "[yaml]": {
          "editor.defaultFormatter": "redhat.vscode-yaml"
        },
        "debug.console.fontSize": 14,
        "debug.internalConsoleOptions": "openOnSessionStart",
        "debug.allowBreakpointsEverywhere": true,
        "debug.terminal.clearBeforeReusing": true,
        "python.analysis.diagnosticMode": "workspace",
        "tensorboard.logDirectory": "/workspaces/torch-starter/logs",
        "codeRunner.executorMap": {
          "python": "cd $dir && python -u $fileName"
        },
        "codeRunner.runInTerminal": true,
        "codeRunner.preserveFocus": false,
        "codeRunner.clearPreviousOutput": true
      }
    }
  },
  "remoteEnv": {
    "CUDA_VISIBLE_DEVICES": "all",
    "UV_SYSTEM_PYTHON": "1",
    "UV_PYTHON_DOWNLOADS": "never",
    "WORKSPACE_ROOT": "/workspaces/torch-starter",
    "PYTHONPATH": "/workspaces/torch-starter"
  },
  "shutdownAction": "stopContainer",
  "hostRequirements": {
    "gpu": "optional",
    "memory": "16gb",
    "cpus": 8,
    "storage": "50gb"
  },
  "capAdd": [
    "SYS_PTRACE"
  ],
  "securityOpt": [
    "seccomp=unconfined"
  ],
  "onCreateCommand": "echo 'üèóÔ∏è  Enhanced container created for volume-based development - PyTorch 2.8.0 + CUDA 12.9 with UV and system Python...'",
  "updateContentCommand": "bash -c 'cd /workspaces/torch-starter 2>/dev/null || cd /workspaces && echo \"üîÑ Content updated - Verifying enhanced system Python environment...\" && python -c \"import torch; print(f\\\"‚úÖ Environment ready - PyTorch {torch.__version__} CUDA: {torch.cuda.is_available()}\\\")\" && uv --version && echo \"üöÄ Enhanced DevContainer ready!\"'",
  "waitFor": "postCreateCommand"
}