{
  "name": "torch_starter-cuda-volume (PyTorch 2.8.0, CUDA 12.9, UV, System Python)",
  "build": {
    "dockerfile": "Dockerfile.volume",
    "context": ".",
    "options": [
      "--build-arg",
      "BUILDKIT_INLINE_CACHE=1",
      "--build-arg",
      "CUDA_VERSION=12.9"
    ]
  },
  "runArgs": [
    "--gpus",
    "all",
    "--shm-size=8g",
    "--ulimit",
    "memlock=-1",
    "--ulimit",
    "stack=67108864",
    "--cap-add",
    "SYS_PTRACE",
    "--security-opt",
    "seccomp=unconfined",
    "--ipc=host"
  ],
  "containerUser": "ubuntu",
  "workspaceFolder": "/workspaces/torch-starter",
  "workspaceMount": "source=torch-starter-workspace,target=/workspaces/torch-starter,type=volume",
  "containerEnv": {
    "HF_HOME": "/home/ubuntu/.cache/huggingface",
    "TRANSFORMERS_CACHE": "/home/ubuntu/.cache/huggingface",
    "TORCH_HOME": "/home/ubuntu/.cache/torch",
    "KAGGLE_CONFIG_DIR": "/home/ubuntu/.kaggle",
    "UV_LINK_MODE": "copy",
    "UV_COMPILE_BYTECODE": "1",
    "UV_CONCURRENT_DOWNLOADS": "20",
    "UV_HTTP_TIMEOUT": "600",
    "UV_SYSTEM_PYTHON": "1",
    "UV_PYTHON_DOWNLOADS": "never",
    "PYTHONDONTWRITEBYTECODE": "1",
    "PYTHONUNBUFFERED": "1",
    "PYTHONOPTIMIZE": "1",
    "CUDA_VERSION": "12.9",
    "CUDA_VISIBLE_DEVICES": "all",
    "NVIDIA_VISIBLE_DEVICES": "all",
    "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
    "NVIDIA_REQUIRE_CUDA": "cuda>=12.9",
    "TORCH_CUDA_ARCH_LIST": "7.0;7.5;8.0;8.6;8.9;9.0",
    "FORCE_CUDA": "1",
    "PYTORCH_CUDA_ALLOC_CONF": "max_split_size_mb:512,garbage_collection_threshold:0.6",
    "CUDA_LAUNCH_BLOCKING": "0",
    "MALLOC_ARENA_MAX": "2",
    "WORKSPACE_NAME": "torch-starter"
  },
  "mounts": [
    {
      "source": "torch-starter-hf-cache",
      "target": "/home/ubuntu/.cache/huggingface",
      "type": "volume"
    },
    {
      "source": "torch-starter-torch-cache",
      "target": "/home/ubuntu/.cache/torch",
      "type": "volume"
    },
    {
      "source": "torch-starter-kaggle-cache",
      "target": "/home/ubuntu/.kaggle",
      "type": "volume"
    },
    {
      "source": "torch-starter-data",
      "target": "/workspaces/torch-starter/data",
      "type": "volume"
    },
    {
      "source": "torch-starter-uv-cache",
      "target": "/home/ubuntu/.cache/uv",
      "type": "volume"
    },
    {
      "source": "torch-starter-pip-cache",
      "target": "/home/ubuntu/.cache/pip",
      "type": "volume"
    },
    {
      "source": "torch-starter-models",
      "target": "/home/ubuntu/.cache/models",
      "type": "volume"
    }
  ],
  "initializeCommand": [
    "bash",
    "-c",
    "echo 'üèóÔ∏è  Initializing Docker volumes for volume-based development...' && docker volume create torch-starter-workspace 2>/dev/null || true; docker volume create torch-starter-hf-cache 2>/dev/null || true; docker volume create torch-starter-torch-cache 2>/dev/null || true; docker volume create torch-starter-kaggle-cache 2>/dev/null || true; docker volume create torch-starter-data 2>/dev/null || true; docker volume create torch-starter-uv-cache 2>/dev/null || true; docker volume create torch-starter-pip-cache 2>/dev/null || true; docker volume create torch-starter-models 2>/dev/null || true; echo '‚úÖ Docker volumes ready for torch-starter'"
  ],
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "configureZshAsDefaultShell": true,
      "upgradePackages": false
    },
    "ghcr.io/devcontainers/features/git:1": {
      "ppa": false,
      "version": "os-provided"
    }
  },
  "postCreateCommand": {
    "clone-and-setup": "bash -c 'if [ ! -f \"/workspaces/torch-starter/pyproject.toml\" ]; then echo \"üîÑ Repository not found, cloning...\"; cd /workspaces && rm -rf torch-starter/* torch-starter/.[!.]* 2>/dev/null || true; git clone https://github.com/yourusername/torch-starter.git /tmp/torch-starter && cp -r /tmp/torch-starter/* /tmp/torch-starter/.[!.]* /workspaces/torch-starter/ 2>/dev/null || true && rm -rf /tmp/torch-starter; fi'",
    "verify-environment": "bash -c 'cd /workspaces/torch-starter && echo \"üêç Using system Python with UV...\" && python -c \"import sys; print(f\\\"‚úÖ Python {sys.version}\\\")\" && python -c \"import torch; print(f\\\"üî• PyTorch {torch.__version__}\\\"); print(f\\\"üöÄ CUDA Available: {torch.cuda.is_available()}\\\"); print(f\\\"üì± CUDA Devices: {torch.cuda.device_count()}\\\") if torch.cuda.is_available() else print(\\\"‚ö†Ô∏è  CUDA Not Available\\\")\" && uv --version && echo \"üì¶ UV Package Manager ready\"'",
    "install-project": "bash -c 'cd /workspaces/torch-starter && if [ -f \"pyproject.toml\" ]; then echo \"üì¶ Installing project dependencies...\"; uv pip install --system -e .; echo \"‚úÖ Project dependencies installed\"; else echo \"‚ö†Ô∏è  pyproject.toml not found, skipping project installation\"; fi'",
    "setup-jupyter-kernel": "bash -c 'cd /workspaces/torch-starter && PYTHON_VERSION=$(python -c \"import sys; print(f\\\"{sys.version_info.major}.{sys.version_info.minor}\\\")\" 2>/dev/null || echo \"3.11\") && python -m ipykernel install --user --name \"torch_starter-${PYTHON_VERSION}\" --display-name \"Python ${PYTHON_VERSION} (torch_starter)\" 2>/dev/null || echo \"Jupyter kernel setup will be done after project installation\"'",
    "setup-git": "bash -c 'cd /workspaces/torch-starter && git config --global --add safe.directory /workspaces/torch-starter'",
    "verify-cuda": "bash -c 'if command -v nvidia-smi >/dev/null 2>&1; then echo \"üñ•Ô∏è  GPU Information:\"; nvidia-smi --query-gpu=name,memory.total,compute_cap --format=csv,noheader; echo \"üìä GPU Driver Info:\"; nvidia-smi --query-gpu=driver_version --format=csv,noheader; else echo \"‚ö†Ô∏è  nvidia-smi not available - GPU may not be accessible\"; fi'"
  },
  "postStartCommand": "bash -c 'cd /workspaces/torch-starter && echo \"üöÄ Volume-based development environment ready!\" && echo \"üí° Workspace: $(pwd)\" && echo \"üí° Use \\\"uv-install <package>\\\" to install packages\" && echo \"üí° Use \\\"gpu-monitor\\\" for GPU monitoring\" && if [ -f \"pyproject.toml\" ]; then echo \"‚úÖ Project ready for development\"; else echo \"‚ö†Ô∏è  Clone your repository into this volume to get started\"; fi'",
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "charliermarsh.ruff",
        "eamodio.gitlens",
        "EditorConfig.EditorConfig",
        "ms-azuretools.vscode-docker",
        "RooVeterinaryInc.roo-cline",
        "mechatroner.rainbow-csv",
        "gaogaotiantian.viztracer-vscode",
        "bierner.markdown-mermaid",
        "ms-toolsai.vscode-ai-remote",
        "GitHub.copilot",
        "ms-python.debugpy",
        "ms-vscode.vscode-json"
      ],
      "settings": {
        "python.defaultInterpreterPath": "/opt/conda/bin/python",
        "python.terminal.activateEnvironment": false,
        "python.analysis.typeCheckingMode": "basic",
        "python.analysis.autoImportCompletions": true,
        "python.analysis.indexing": true,
        "python.analysis.extraPaths": [
          "/workspaces/torch-starter"
        ],
        "python.analysis.packageIndexDepths": [
          {
            "name": "sklearn",
            "depth": 2
          },
          {
            "name": "torch",
            "depth": 3
          },
          {
            "name": "transformers",
            "depth": 2
          },
          {
            "name": "datasets",
            "depth": 2
          }
        ],
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.testing.pytestArgs": [
          "tests"
        ],
        "ruff.enable": true,
        "ruff.organizeImports": true,
        "ruff.serverEnabled": true,
        "ruff.lint.enable": true,
        "ruff.format.enable": true,
        "ruff.configuration": "/workspaces/torch-starter/pyproject.toml",
        "files.watcherExclude": {
          "**/__pycache__/**": true,
          "**/.mypy_cache/**": true,
          "**/.ruff_cache/**": true,
          "**/.pytest_cache/**": true,
          "**/node_modules/**": true,
          "**/.cache/**": true,
          "**/data/**": true,
          "**/logs/**": true,
          "**/*.log": true
        },
        "search.exclude": {
          "**/__pycache__": true,
          "**/.mypy_cache": true,
          "**/.ruff_cache": true,
          "**/.cache": true,
          "**/data": true,
          "**/logs": true
        },
        "files.exclude": {
          "**/__pycache__": true,
          "**/.mypy_cache": true,
          "**/.ruff_cache": true,
          "**/.pytest_cache": true
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "terminal.integrated.shellIntegration.enabled": true,
        "terminal.integrated.cwd": "/workspaces/torch-starter",
        "terminal.integrated.env.linux": {
          "CUDA_VISIBLE_DEVICES": "all",
          "PYTORCH_CUDA_ALLOC_CONF": "max_split_size_mb:512,garbage_collection_threshold:0.6",
          "UV_SYSTEM_PYTHON": "1",
          "UV_PYTHON_DOWNLOADS": "never"
        },
        "jupyter.askForKernelRestart": false,
        "jupyter.defaultKernel": "torch_starter-3.11",
        "jupyter.notebookFileRoot": "/workspaces/torch-starter",
        "notebook.experimental.openGettingStarted": false,
        "notebook.kernelProviderAssociations": [
          {
            "viewType": "jupyter-notebook",
            "kernelspec": "torch_starter-3.11"
          }
        ],
        "git.enableSmartCommit": true,
        "git.autofetch": true,
        "git.defaultCloneDirectory": "/workspaces",
        "extensions.autoUpdate": false,
        "telemetry.telemetryLevel": "off",
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports.ruff": "explicit",
          "source.fixAll.ruff": "explicit"
        },
        "editor.rulers": [
          88,
          100
        ],
        "workbench.colorTheme": "Default Dark+",
        "workbench.preferredDarkColorTheme": "Default Dark+",
        "workbench.preferredLightColorTheme": "Default Light+",
        "[python]": {
          "editor.defaultFormatter": "charliermarsh.ruff",
          "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit",
            "source.fixAll": "explicit"
          },
          "editor.formatOnSave": true
        },
        "[json]": {
          "editor.defaultFormatter": "vscode.json-language-features"
        },
        "[jsonc]": {
          "editor.defaultFormatter": "vscode.json-language-features"
        },
        "[dockerfile]": {
          "editor.defaultFormatter": "ms-azuretools.vscode-docker"
        },
        "debug.console.fontSize": 14,
        "debug.internalConsoleOptions": "openOnSessionStart",
        "python.analysis.diagnosticMode": "workspace"
      }
    }
  },
  "remoteEnv": {
    "CUDA_VISIBLE_DEVICES": "all",
    "UV_SYSTEM_PYTHON": "1",
    "UV_PYTHON_DOWNLOADS": "never",
    "WORKSPACE_ROOT": "/workspaces/torch-starter"
  },
  "shutdownAction": "stopContainer",
  "hostRequirements": {
    "gpu": "optional",
    "memory": "16gb",
    "cpus": 8,
    "storage": "50gb"
  },
  "capAdd": [
    "SYS_PTRACE"
  ],
  "securityOpt": [
    "seccomp=unconfined"
  ],
  "onCreateCommand": "echo 'üèóÔ∏è  Container created for volume-based development - PyTorch 2.8.0 + CUDA 12.9 with UV and system Python...'",
  "updateContentCommand": "bash -c 'cd /workspaces/torch-starter 2>/dev/null || cd /workspaces && echo \"üîÑ Content updated - Verifying system Python environment...\" && python -c \"import torch; print(f\\\"‚úÖ Environment ready - PyTorch {torch.__version__} CUDA: {torch.cuda.is_available()}\\\")\" && uv --version'",
  "waitFor": "postCreateCommand"
}