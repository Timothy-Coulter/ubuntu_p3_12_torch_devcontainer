# Optional: docker-compose override for additional performance tuning
# Place in project root for advanced Docker optimizations

version: '3.8'

services:
  devcontainer:
    # Performance optimizations
    shm_size: 4gb
    memswap_limit: 16gb
    mem_limit: 12gb
    cpus: '8.0'

    # Advanced runtime options
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined

    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN

    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack: 67108864
      nofile:
        soft: 65536
        hard: 65536

    # Environment optimizations
    environment:
      # Python performance
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONFAULTHANDLER=1
      - PYTHONHASHSEED=random

      # NumPy/BLAS optimization
      - OPENBLAS_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - NUMEXPR_NUM_THREADS=4
      - OMP_NUM_THREADS=4

      # PyTorch optimizations
      - TORCH_NUM_THREADS=4
      - CUDA_VISIBLE_DEVICES=all
      - CUDA_DEVICE_ORDER=PCI_BUS_ID

      # Memory management
      - MALLOC_ARENA_MAX=2
      - MALLOC_MMAP_THRESHOLD_=131072
      - MALLOC_TRIM_THRESHOLD_=131072
      - MALLOC_TOP_PAD_=131072

      # UV/uv optimizations
      - UV_LINK_MODE=copy
      - UV_COMPILE_BYTECODE=1
      - UV_CONCURRENT_DOWNLOADS=10
      - UV_HTTP_TIMEOUT=300

    # Tmpfs mounts for performance-critical temporary files
    tmpfs:
      - /tmp:size=2G,exec,nodev,nosuid
      - /var/tmp:size=1G,exec,nodev,nosuid

    # Additional volume mounts for caching
    volumes:
      # Persistent caches (named volumes)
      - uv-cache:/home/vscode/.cache/uv
      - pip-cache:/home/vscode/.cache/pip
      - mypy-cache:/home/vscode/.mypy_cache
      - pytest-cache:/home/vscode/.pytest_cache
      # Bind mounts for development (use only if not on Windows)
      # Uncomment if on Linux/Mac for better performance than named volumes
      # - ~/.gitconfig:/home/vscode/.gitconfig:ro
      # - ~/.ssh:/home/vscode/.ssh:ro

      # Logging optimization
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

    # Network performance
    networks:
      - default

    # Health check
    healthcheck:
      test: [ "CMD", "python", "-c", "import torch; print('OK')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Named volumes for persistent caching
volumes:
  uv-cache:
    driver: local
  pip-cache:
    driver: local
  mypy-cache:
    driver: local
  pytest-cache:
    driver: local

# Optimized network
networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: torch-starter-br0
